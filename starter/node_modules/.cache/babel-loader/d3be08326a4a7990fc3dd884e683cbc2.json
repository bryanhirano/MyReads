{"ast":null,"code":"var _jsxFileName = \"/Users/bryanhirano/Documents/GitHub/nd0191-c1-myreads/starter/src/App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport * as BookAPI from \"./BooksAPI\";\nimport { useState, useEffect, forceUpdate } from \"react\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Read from \"./Read.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [showSearchPage, setShowSearchpage] = useState(false);\n  const [currentlyReading, setCurrentlyReading] = useState([]);\n  const [wantToRead, setWantToRead] = useState([]);\n  const [read, setRead] = useState([]);\n  const [updated, setUpdated] = useState(true);\n\n  const deleteAllData = () => {\n    setCurrentlyReading([]);\n    setRead([]);\n    setWantToRead([]);\n  };\n\n  const updateBookShelf = async (book, shelf) => {\n    await BookAPI.update(book, shelf);\n    setUpdated(true);\n  };\n\n  useEffect(() => {\n    if (updated) {\n      deleteAllData();\n\n      const getBooks = async () => {\n        const result = await BookAPI.getAll();\n        console.log(result);\n        result.map(data => {\n          if (data.shelf === \"currentlyReading\") {\n            setCurrentlyReading(currentlyReadin => [...currentlyReadin, data]);\n          }\n\n          if (data.shelf === \"wantToRead\") {\n            setWantToRead(wantToRead => [...wantToRead, data]);\n          }\n\n          if (data.shelf === \"read\") {\n            setRead(read => [...read, data]);\n          }\n        });\n      };\n\n      getBooks();\n    }\n\n    return () => {\n      setUpdated(false);\n    };\n  }, [updated]);\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: /*#__PURE__*/_jsxDEV(Route, {\n      path: \"\",\n      element: () => {\n        {\n          currentlyReading.length > 0 && /*#__PURE__*/_jsxDEV(Read, {\n            title: \"Currently Reading\",\n            update: updateBookShelf,\n            books: currentlyReading\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 53\n          }, this);\n        }\n        {\n          wantToRead.length > 0 && /*#__PURE__*/_jsxDEV(Read, {\n            title: \"Want to read\",\n            update: updateBookShelf,\n            books: wantToRead\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 47\n          }, this);\n        }\n        {\n          read.length > 0 && /*#__PURE__*/_jsxDEV(Read, {\n            title: \"Read\",\n            update: updateBookShelf,\n            books: read\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 41\n          }, this);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 15\n  }, this);\n}\n\n_s(App, \"p3g9NJfWbPE+WxBkRE+RQ2/lIvI=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["BookAPI","useState","useEffect","forceUpdate","Routes","Route","Read","App","showSearchPage","setShowSearchpage","currentlyReading","setCurrentlyReading","wantToRead","setWantToRead","read","setRead","updated","setUpdated","deleteAllData","updateBookShelf","book","shelf","update","getBooks","result","getAll","console","log","map","data","currentlyReadin","length"],"sources":["/Users/bryanhirano/Documents/GitHub/nd0191-c1-myreads/starter/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport * as BookAPI from \"./BooksAPI\";\nimport {useState, useEffect, forceUpdate} from \"react\";\nimport {Routes, Route} from \"react-router-dom\"\nimport Read from \"./Read.js\"\n\nfunction App() {\n  const [showSearchPage, setShowSearchpage] = useState(false);\n\n  const [currentlyReading, setCurrentlyReading] = useState([])\n  const [wantToRead, setWantToRead] = useState([])\n  const [read, setRead] = useState([])\n  const [updated, setUpdated] = useState(true)\n\n  const deleteAllData = () => {\n    setCurrentlyReading([])\n    setRead([])\n    setWantToRead([])\n  }\n\n\n\n  const updateBookShelf = async (book,shelf) => {\n     await BookAPI.update(book,shelf)\n      \n      setUpdated(true);\n\n      \n  }\n  \n  \n  useEffect(()=>{\n    \n    if(updated){\n      deleteAllData();\n      const getBooks = async () => {\n        const result = await BookAPI.getAll()\n        console.log(result)\n      \n     \n        result.map((data) => {\n\n      \n          if(data.shelf === \"currentlyReading\"){\n            setCurrentlyReading(currentlyReadin => [...currentlyReadin, data])\n  \n          }\n          if(data.shelf === \"wantToRead\"){\n            setWantToRead(wantToRead => [...wantToRead, data])\n          }\n          if(data.shelf === \"read\"){\n            setRead((read) => [...read, data])\n          }\n          \n  \n        })\n\n      \n      }\n      getBooks();\n    }\n    return (() => { setUpdated(false);\n    })\n     \n    \n     \n\n  \n  \n  },[updated])\n  \n\n\n\n  return (\n   \n       \n              <Routes>\n                <Route path=\"\" element={() => { \n                  {(currentlyReading.length > 0) && <Read title=\"Currently Reading\" update={updateBookShelf} books={currentlyReading}></Read>\n                  }\n\n                  {(wantToRead.length > 0) && <Read title=\"Want to read\" update={updateBookShelf} books={wantToRead}></Read>\n                  }\n                  {(read.length > 0) && <Read title=\"Read\" update={updateBookShelf} books={read}></Read>\n                  }}\n                }/>\n\n              \n            </Routes>\n       \n       \n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}